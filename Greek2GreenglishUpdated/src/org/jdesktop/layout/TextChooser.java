/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jdesktop.layout;
import javax.swing.JFileChooser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.EventQueue;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import my.Greek2Greenglish.Refactor;
/**
 *
 * @author myros asdasd
 */
public class TextChooser extends javax.swing.JFrame {
String linesep = "";
String filename = "";
String fileseparator = "";
Refactor ref = new Refactor();
boolean append = true;

    /**
     * Creates new form TextChooser
     */
    public TextChooser() {
        initComponents();
        this.linesep = System.getProperty("line.separator");
        this.linesep = this.linesep;
        String filesep = System.getProperty("file.separator");
        this.fileseparator = filesep;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

         jFileChooser1 = new javax.swing.JFileChooser();

	
	jFileChooser1.setApproveButtonText("Refactor text files");
	jFileChooser1.setApproveButtonToolTipText("Changes the text data to Greenglish data");
	jFileChooser1.setMultiSelectionEnabled(true);
	jFileChooser1.addActionListener(new ActionListener()
	{
      	public void actionPerformed(ActionEvent evt)
       		{
       			TextChooser.this.ActionHandler(evt);
      		}
    	});

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
private void ActionHandler(ActionEvent evt)
{
    if (evt.getActionCommand() == "ApproveSelection")
    {
       File[] filear = this.jFileChooser1.getSelectedFiles();
       printFileArray(filear);
       for (int k = 0; k < filear.length; k++) {
        openFile(filear[k]);
      }
       
       /* Display output message alert dialog */
       AlertMessage myAlert = new AlertMessage();
       myAlert.setVisible(true);
       
     }
     else if (evt.getActionCommand() == "CancelSelection")
     {
       System.out.println("Exit");
     

      dispose();
    }
}    
    
    
/*
private void ActionHandler(ActionEvent evt){

if (evt.getActionCommand() == "ApproveSelection") {
    File[] filear = this.jFileChooser1.getSelectedFiles();
    printFileArray(filear);
    openFile(filear[k]);
}
for (int j = 0; j < filear.length; j++) {
    System.out.println(filear[j]+" dcsdcsdc");
    renameFile(filear[j]);
}
}

else if (evt.getActionCommand() == "CancelSelection")
{
System.out.println("Exit");
      
dispose();
}
   
}
*/

public void printFileArray(File[] filearray)
{
   for (int k = 0; k < filearray.length; k++) {
      System.out.println("Selected:" + filearray[k].getName());
     }
}

public void renameFile(File f)
{
   this.filename = f.getName();
    
   String path = f.getParent();
   Refactor ref = new Refactor(this.filename, f);
   //System.out.println(path + this.fileseparator +" ascacas"+this.fileseparator+ref.filename+this.filename);  
   File nfile = new File(path + this.fileseparator + ref.filename);
   f.renameTo(nfile);
 }

public void openFile(File f)
{
    System.out.println("trying to open file:" + f.getName() + ".................");
try{
    FileInputStream fstream = new FileInputStream(f);
    BufferedReader in = new BufferedReader(new InputStreamReader(fstream));
    System.out.println("File opened succesfully.................");
    int i = 10000;
    String next_line = "";
    String textdata = "";
    File newf = createFile(f);
    FileWriter fw = new FileWriter(newf, this.append);
for (;;){
    if (!in.ready()){
        this.append = false;
        System.out.println("Closing fileWriter.................");
        fw.close();
        break;
    }
next_line = in.readLine();
        processLine(next_line, fw);
     }
in.close();
     }
    catch (Exception e){
        System.err.println("File input error");
    }
}

public File createFile(File f)
{
    File file = new File(f.getParent() + this.fileseparator + "new_" + f.getName());
    System.out.println("Created file " + file.getName() + " in path " + file.getAbsolutePath());
    try
     {
       FileOutputStream out = new FileOutputStream(file.getAbsolutePath(), this.append);
       PrintStream p = new PrintStream(out);
       p.close();
    }
     catch (Exception e)
    {
       System.err.println("Error writing to file");
     }
    return file;
   }
   
public void processLine(String line, FileWriter fw)
{
     String newlinestr = "";
     try
     {
       for (int i = 0; i < line.length(); i++)
       {
        char cur_char = line.charAt(i);
        int decim_char=cur_char;   
       System.out.println(decim_char);
        
        char c = this.ref.Map(cur_char);
        
        newlinestr = newlinestr + c;
       }
       fw.write(newlinestr + this.linesep);
}
    catch (IOException ioe)
     {
       System.err.println("IOException: " + ioe.getMessage());
    }
     System.out.println(newlinestr);
   }

 /**
 * @param args the command line arguments
 */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextChooser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
}
